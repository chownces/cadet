defmodule Cadet.Courses.SourcecastTest do
  alias Cadet.Courses.Sourcecast

  use Cadet.ChangesetCase, entity: Sourcecast

  describe "Changesets" do
    test "valid changesets" do
      assert_changeset(
        %{
          title: "Recording One",
          description: "This is a recording on rune mission",
          uid: "unique_id",
          audio: build_upload("test/fixtures/upload.wav", "audio/wav"),
          playbackData:
            "{\"init\":{\"editorValue\":\"// Type your program in here!\"},\"inputs\":[]}"
        },
        :valid
      )
    end

    test "uid is autogenerated if empty" do
      changeset =
        %Sourcecast{}
        |> Sourcecast.changeset(%{
          title: "Recording One",
          description: "This is a recording on rune mission",
          uid: "",
          audio: build_upload("test/fixtures/upload.wav", "audio/wav"),
          playbackData:
            "{\"init\":{\"editorValue\":\"// Type your program in here!\"},\"inputs\":[]}"
        })

      uid_change = get_change(changeset, :uid)

      assert changeset.valid?
      assert is_binary(uid_change)
      refute "" == uid_change
    end

    test "uid is autogenerated if nil" do
      changeset =
        %Sourcecast{}
        |> Sourcecast.changeset(%{
          title: "Recording One",
          description: "This is a recording on rune mission",
          uid: nil,
          audio: build_upload("test/fixtures/upload.wav", "audio/wav"),
          playbackData:
            "{\"init\":{\"editorValue\":\"// Type your program in here!\"},\"inputs\":[]}"
        })

      uid_change = get_change(changeset, :uid)

      assert changeset.valid?
      assert is_binary(uid_change)
      refute "" == uid_change
    end

    test "invalid changeset" do
      assert_changeset(
        %{title: "Recording One", description: "This is a recording on rune mission"},
        :invalid
      )

      assert_changeset(%{title: "", description: "Description"}, :invalid)
    end
  end
end
